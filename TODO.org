* TODO Useful links from chat

  #+BEGIN_SRC org
    2019-06-18 16:19:46.355591809|lorymaster|Could also add this in the todo: https://tools.ietf.org/html/rfc6970 RFC for universal plug and play protocol
    2019-06-18 18:42:37.673204119|x33grawl|whoops this one https://stackoverflow.com/questions/31799336/how-to-build-grub2-bootloader-from-its-source-and-test-it-with-qemu-emulator
    2019-06-18 19:16:41.155079973|joshuagollaher|this says that it only happens on 32 bit https://lists.gnu.org/archive/html/help-grub/2013-11/msg00006.html
    2019-06-18 19:33:59.211878178|wtfblub|theres a patch for this error http://git.savannah.gnu.org/cgit/grub.git/commit/util?id=842c390469e2c2e10b5aa36700324cd3bde25875
  #+END_SRC

* TODO Roadmap

  - [-] See how GRUB 2 handles keyboard
    - [X] Gameport Exploration
      - [X] file:./grub/grub-core/commands/lspci.c::79
        - [X] What is Gameport Controller
          - [X] [[https://www.ebay.com/itm/USB-to-Joystick-15-Pin-Male-Gameport-Adapter-Converter-Adaptor-With-6ft-Cable/251010052320?epid=1943412725&hash=item3a715d70e0:g:mqEAAOSwYHxWOI1M][USB to Joystick 15 Pin Male Gameport Adapter Converter Adaptor With 6ft Cable...]]
            - [X] The VGA looking thing
          - [X] MIDI gameport
            - [X] [[https://en.wikipedia.org/wiki/Game_port][Game port - Wikipedia]]
    - [X] Some boring keyboard layout stuff
      - [X] file:./grub/include/grub/keyboard_layouts.h::36
        - [X] enum grub_keyboard_key looks like a GRUB abstraction layer over keyboards
          - [X] file:./grub/util/grub-mklayout.c::215
            - [X] grub-mklayout
              - [X] not sure if it's even useful
    - [X] How I can type anything in the GRUB if I don't have any USB devices (according to `usb`)
      - [X] You are using terminal_input called console
        - [X] Where is it located?
          - [X] Most probably here file:grub/grub-core/term/i386/pc/console.c::1
    - [X] Some kind of fake input that constantly produces some actions
      - [X] file:./grub/grub-core/tests/fake_input.c::1 as an example
        - [X] file:grub/grub-core/term/khooy.c::1
    - [-] How actual USB Keyboard Support works
      - [-] file:./grub/grub-core/term/usb_keyboard.c::1
        - [-] `grub_usb_keyboard_getkey`
          - [-] it's actually a method of `struct grub_term_input`
            - [-] Definition of `struct grub_term_input` file:./grub/include/grub/term.h::137
              - [-] How many terms do we have?
                - [-] file:./grub/grub-core/kern/term.c::87
                  - [-] `grub_getkey_noblock`
                    - [-] FOR_ACTIVE_TERM_INPUTS
                      - [-] file:./grub/include/grub/term.h::321
                        - [X] FOR_LIST_ELEMENTS
                          - file:./grub/include/grub/list.h::37
                          - It is used to iterate LinkedLists
                          - [X] Is that X macro?
                            - [X] No
                        - [-] `grub_term_inputs`
                          - [-] This is probably the global list of terminals
                            - [-] file:./grub/include/grub/term.h::241
                              - [X] EXPORT_VAR
                                - file:./grub/include/grub/symbol.h::69
                                - [X] file:./grub/grub-core/Makefile.am::298
                                  - This looks like external preprocessing
                                  - [X] ASM_PREFIX
                                    - [X] file:./grub/grub-core/Makefile.am::286
                                      - [X] Looks like a deadend.
                                - It's probably very important. But we can simply ignore it
                              - [-] Where grub_term_inputs are initialized
                                - [-] fake_input file:./grub/grub-core/tests/fake_input.c::56
                                  - [-] usb_keyboard.c and fake_input.c are implementations of the same interface
                                    - [X] grub_usb_keyboard_attach looks interesting
                                      - [X] file:./grub/grub-core/term/usb_keyboard.c::147
                                        - [X] grub_usb_device_t
                                          - [X] It was a spoiler
                                    - [X] What is the interface
                                      - [X] Look at the headers they include. They probably include the interface
                                        - [X] #include <grub/term.h>
                                          - [X] There is also gfxterm.h
                                            - [X] file:./grub/include/grub/gfxterm.h::1
                                              - [X] I don't think it's important right now
                                          - [X] file:./grub/include/grub/term.h::1
                                            - [X] And we already been here
                                    - [-] They all initialize their own instance of grub_term_input
                                      - [-] How those instances are assembled into a linked list later?
                                        - [-] Do usb_keyboard and fake_input mention grub_term_inputs
                                          - [X] usb_keyboard does not
                                          - [X] fake_input
                                            - [X] file:./grub/grub-core/tests/fake_input.c::56
                                          - [ ] grub_term_register_input_active
                                            - [ ] file:./grub/include/grub/term.h::267
                                              - [ ] And it mentions grub_term_inputs
                                                - [ ] Let's go up the callstack
                                                  - [ ] file:./grub/grub-core/term/usb_keyboard.c::147
                                                    - [ ] grub_usb_keyboard_attach
                                                      - [ ] file:./grub/grub-core/term/usb_keyboard.c::442
                                                        - [ ] struct grub_usb_attach_desc
                                                          - [ ] file:./grub/include/grub/usb.h::297
                                - [ ] 
  - [ ] Try to debug GRUB2 with gdb and see how it boots itself up
  - [ ] Find the way to receive stuff from gamepad
    - [ ] Dig down through abstractions
      - [ ] SDL2
        - [ ] X11
          - [ ] Linux Input
            - [ ] Driver
              - [ ] ...
  - [ ] it might make sense to try get some input working from the gamepad in Linux first, rather than in grub 
  - [ ] USB vs HID
    - [ ] https://en.wikipedia.org/wiki/USB_human_interface_device_class
    - [ ] https://usb.org/sites/default/files/documents/hid1_11.pdf

** DONE Development Setup

    - [X] Mirror in Tsoding organization
      - [X] [[https://help.github.com/en/articles/about-github-mirrors][About GitHub mirrors - GitHub Help]]
        - [X] [[https://git-scm.com/book/en/v2/Customizing-Git-Git-Hooks][Git - Git Hooks]]
          - [X] Wrong way
      - [X] Create separate repo with submodule
        - [X] [[https://github.com/tsoding/grub-gamepad][GitHub - tsoding/grub-gamepad: On going effort to bring gamepad/joystick supp...]]
    - [X] Emulation
      - [X] qemu
        - [X] Actually the recommended way to test grub
      - [X] VirtualBox
        - [X] To heavy
    - [X] Build
      - [X] git clone git://git.savannah.gnu.org/grub.git
        - [X] INSTALL file
          - [X] The instructions mention some kind of grub-emu. What is that?
            - [X] [[http://www.ubuntubuzz.com/2015/06/how-to-preview-grub-bootloader-changes.html][How To Preview GRUB Bootloader Changes Without Restart with grub-emu]]
              - [X] I don't have it in NixOS. Can I build it from the source code?
                - [X] No, grub-emu is a hoax.
        - [X] [[https://stackoverflow.com/questions/31799336/how-to-build-grub2-bootloader-from-its-source-and-test-it-with-qemu-emulator][how to build grub2 bootloader from it's source and test it with qemu emulator...]]
          - [X] You have to use grub-mkrescue instead
            #+BEGIN_SRC bash
              grub-mkrescue -o test.iso
              qemu-system-i386 -cdrom test.iso
            #+END_SRC
    - [X] Is there any way to debug output grub instead of messing with hooking up with GBD?
      - [X] grub_dprintf looks like a logging system (with topic and shit)
        - [X] How to read GRUB logs?
          - [X] [[https://stackoverflow.com/questions/34938067/reading-grub2-debug-logs][grub - Reading GRUB2 debug logs - Stack Overflow]]
            - [X] Try to add `set pager=1` and `set debug=all` to the config
              - [X] It worked, it printed a lot of shite
              - [X] Can we add our own log entry?
                - [X] Yep

      
* DONE Get rid of the grub source · Issue #4 · tsoding/grub-gamepad · GitHub

  - [X] [[https://github.com/tsoding/grub-gamepad/issues/4][Get rid of the grub source · Issue #4 · tsoding/grub-gamepad · GitHub]]
    - [X] How to build a GRUB module without GRUB source code?
      - [X] [[https://blog.fpmurphy.com/2010/06/grub2-modules.html][GRUB2 Modules « Musings]]
        - [X] This article suggests to make the module a part of the build process
      - [X] [[https://wiki.osdev.org/Writing_GRUB_Modules][Writing GRUB Modules - OSDev Wiki]]
        - [X] You can build "out-of-tree", but this is just one option
          - [X] Building "in-tree" is not even something that is discouraged
            - [X] I think we gonna keep doing "in-tree" because it
              handles a lot of stuff for out-of-the-box

* DONE New grub version · Issue #5 · tsoding/grub-gamepad · GitHub

  - [X] [[https://github.com/tsoding/grub-gamepad/issues/5][New grub version · Issue #5 · tsoding/grub-gamepad · GitHub]]
    - [X] configure.ac:414: error: possibly undefined macro: AC_CHECK_HEADERS
      - [X] pkg-config
* TODO usb_gamepad is not using dpad for arrows · Issue #15 · tsoding/grub-gamepad · GitHub
  [[https://github.com/tsoding/grub-gamepad/issues/15][usb_gamepad is not using dpad for arrows · Issue #15 · tsoding/grub-gamepad · GitHub]]
** TODO Reports

   - report[0-3] - sticks coordinates
   - report[4]
     - 0x18 - X 1
     - 0x28 - A 2
     - 0x48 - B 3
     - 0x88 - Y 4
     - 0x0  - dpad up
     - 0x1  - dpad up/right
     - 0x2  - dpad right
     - 0x3  - dpad down/right
     - 0x4  - dpad down
     - 0x5  - dpad down/left
     - 0x6  - dpad left
     - 0x7  - dpad up/left
     - 0x8  - dpad centered
   - report[5]
     - 0x00  - nothing
     - 0x01  - LB
     - 0x02  - RB
     - 0x04  - LT
     - 0x08  - RT
     - 0x10  - back
     - 0x20  - start
     - 0x40  - LS
     - 0x80  - RS

** DONE Is there a way to query what joystick supports

   [[https://github.com/tsoding/grub-gamepad/issues/17][tsoding/grub-gamepad#17 Is there a way to query what joystick supports]]

** TODO Configurable mappings

   - [X] down mapping does work
   - [ ] what are the codes for keydown
* TODO The module probably works only with a single model of the gamepad · Issue #16 · tsoding/grub-gamepad · GitHub
  [[https://github.com/tsoding/grub-gamepad/issues/16][The module probably works only with a single model of the gamepad · Issue #16 · tsoding/grub-gamepad · GitHub]]

  - [X] Reject any HID devices that are not logitech rumble f510
    - [X] file:grub/include/grub/usbdesc.h::41
  - [ ] Make it easy to replace logitech_rumble_f510_state with something else?
    - [ ] Check out HID specs for gamepads or something? (i don't even know what I'm talking about)
